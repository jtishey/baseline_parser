
 baseline_parser.py
###################

 Example usage: python baseline_parser.py -m 123456
 Requires a seperate baseline script that collects commands
   before and after the MOP is executed.

USAGE:
Required arguments:
 -m / --mop     -  Specify a MOP number or tag to locate the baseline files for and run checks against

Optional arguments:
 -b / --before  -  Specify a keyword to identify "BEFORE" baseline files (default = before)
 -a / --after   -  Specify a keyword to identify "AFTER" baseline files (default = after)
 -d / --dev     -  Run checks for a single device from the baselines (default = all)
 -c / --conf    -  Display configuration diffs only (no other tests)
 -s / --summ    -  Display summary results only (Total number of passed/failed tests)
 -v / --verbose -  Display output of PASSED checks as well as FAILED checks (off by default)
 -h / --help    -  Display CLI syntax help


baseline_parser is a script to run tests agains before/after MOP baselines.

Script looks for baseline files based on the MOP/RFC number (and optionally before/after keywords)
It then seperates the commands executed during the baselines to be tested individually and displays
output based on the results of those tests. 


Running the script:
-------------------------------
By default, only Failed tests are displayed, and only a MOP number is required.
$ baseline_check -m 123456

If boefore/after keywords other than 'before' & 'after' have been specified when running Baseliner, those must also be specified:
$ baseline_check -m 123455 -b PRE -a POST

By default, only Failed test details are displayed, to display details for all tests, use verbose flags:
$ baseline_check -m 123456 -v

For large MOPs, you may want to run tests on a specific device(s), to do this use the -d option:
$ baseline_check -m 123456 -d pe01.anyw01-us
$ baseline_check -m 123456 -d pe01.anyw01-us,pe02.anyw01-us

-c can be used to display only the configuration diffs
-s can be used to display only the device summaries
-l can be used to display no output - only log to file
-o can be used to re-run checks and replace log file

Lastly, a log file is created in the MOP baseline folder containing the verbose output on each run.
Ex. /opt/ipeng/mops/Year_2017/Sep_01/123456/BaselineParser.log



Creating and Editing Testfiles:
-------------------------------
testfiles are located in 'baseline_parser/testfiles/' in a seperate folder for each OS Type
(JUNOS / IOS / XR / TiMOS)

They are YAML files and are currently setup as follows:

JUNOS/test_isis_adjacency.yml:
---
- show_isis_adjacency:              < Arbitrary test case name
  command:  show isis adjacency     < Command to match in the baseline files
  ignore-null: False                < Make test not fail if there is nothing to match (future)
  iterate: [all]                    < Lines of command output to iterate on, either [all] or a list of keywords to match in a line
  blacklist: [Interface, Metric]    < Ignore lines containing these words (comma seperated inside brackets: [ ]
  tests:
    - no-diff: [0,1,3]              < Type of test and indexes to match on (only no-diff supported so far)
      info: "PASSED! ISIS adj to {{ pre[1] }} on {{ pre[0] }} is still {{ pre[3] }}"    < Message to display on PASS
      err: "FAILED! ISIS adj to {{ pre[1] }} on {{ pre[0] }} failed check"              < Message to display on FAIL


Additional Info:
----------------
iterate and blacklists are formatted as python lists ex:[value1, value2]
    A match occurs if any of the keywords appears in the command output.
    blacklist words can be used to easily ignore headings for example 

no-diff indicates there should be no difference in the indexes specified for before/after
delta indicates there should be less than the specified percentage change in the specified index

An index specifies a column or word in a line of output.  For example:
  A line from "show isis adjacency" might look like this:
  ge-0/0/1.0            vSRX1  2  Up                   28

Each word is numbered, left to right, starting from 0 so:
 0 = ge-0/0/1.0
 1 = vSRX1
 2 = 2
 3 = Up
 4 = 28

The first index listed after no-diff is used as an identifier to match on.
In this case, we want to use 0, to run checks based on the interface, so it is specified first.

For delta tests, the first index listed is used as an identifier to match on. The second
index is the value that should be checked.  The third index is the percentage of change allowed.

Once a testfile is created, it must be added to config.yml to be run.

  baseline_parser/config.yml
